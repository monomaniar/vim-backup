let SessionLoad = 1
if &cp | set nocp | endif
let s:cpo_save=&cpo
set cpo&vim
inoremap <silent> <expr> <Plug>(neocomplcache_start_unite_complete) unite#sources#neocomplcache#start_complete()
inoremap <silent> <expr> <Plug>(neocomplcache_start_unite_quick_match) unite#sources#neocomplcache#start_quick_match()
inoremap <silent> <Plug>(neocomplcache_start_auto_complete) =neocomplcache#popup_post()
inoremap <silent> <Plug>(neocomplcache_start_omni_complete) =neocomplcache#popup_post()
inoremap <silent> <expr> <Plug>(neosnippet_start_unite_snippet) unite#sources#snippet#start_complete()
inoremap <silent> <expr> <Plug>(neocomplcache_start_unite_snippet) unite#sources#snippet#start_complete()
inoremap <silent> <expr> <Plug>(neosnippet_jump) neosnippet#jump_impl()
inoremap <silent> <expr> <Plug>(neosnippet_expand) neosnippet#expand_impl()
inoremap <silent> <expr> <Plug>(neosnippet_jump_or_expand) neosnippet#jump_or_expand_impl()
inoremap <silent> <expr> <Plug>(neosnippet_expand_or_jump) neosnippet#expand_or_jump_impl()
imap <silent> <Plug>(neocomplcache_snippets_force_jump) <Plug>(neosnippet_jump)
imap <silent> <Plug>(neocomplcache_snippets_force_expand) <Plug>(neosnippet_expand)
imap <silent> <Plug>(neocomplcache_snippets_jump) <Plug>(neosnippet_jump_or_expand)
imap <silent> <Plug>(neocomplcache_snippets_expand) <Plug>(neosnippet_expand_or_jump)
inoremap <silent> <Plug>NERDCommenterInInsert  <BS>:call NERDComment(0, "insert")
inoremap <expr> <BS> neocomplcache#smart_close_popup() . "\"
smap  <Plug>(neocomplcache_snippets_expand)
nnoremap  :nohl
nmap ,tc <Plug>Colorizer
nmap ,ihn :IHN
nmap ,is :IHS:A
nmap ,ih :IHS
nmap ,ca <Plug>NERDCommenterAltDelims
vmap ,cA <Plug>NERDCommenterAppend
nmap ,cA <Plug>NERDCommenterAppend
vmap ,c$ <Plug>NERDCommenterToEOL
nmap ,c$ <Plug>NERDCommenterToEOL
vmap ,cu <Plug>NERDCommenterUncomment
nmap ,cu <Plug>NERDCommenterUncomment
vmap ,cy <Plug>NERDCommenterYank
nmap ,cy <Plug>NERDCommenterYank
vmap ,ci <Plug>NERDCommenterInvert
nmap ,ci <Plug>NERDCommenterInvert
vmap ,cs <Plug>NERDCommenterSexy
nmap ,cs <Plug>NERDCommenterSexy
vmap ,c  <Plug>NERDCommenterToggle
nmap ,c  <Plug>NERDCommenterToggle
vmap ,cc <Plug>NERDCommenterComment
nmap ,cc <Plug>NERDCommenterComment
map ,dk <Plug>DirDiffPrev
map ,dj <Plug>DirDiffNext
map ,dp <Plug>DirDiffPut
map ,dg <Plug>DirDiffGet
nmap <silent> ,tr :TlistToggleRight
nmap ,tl :TlistToggleh
nmap ,fl :NERDTreeToggleh
nnoremap <silent> ,fo :Unite outline
nnoremap <silent> ,fr :Unite -buffer-name= register register
nnoremap <silent> ,fb :Unite -buffer-name= buffer file_mru bookmark file
nnoremap <silent> ,ft :Unite tag
nnoremap <silent> ,fm :Unite mark
nnoremap <silent> ,ff :Unite -input=/home/wuranbo/svn-refactor/onlinenavi/ -buffer-name=buffer file_mru bookmark file
nmap ,ts :tselect
nnoremap ,cd :cd %:p:h:pwd
nmap <silent> ,gW :vimgrep // %:ccl:cwinJ:nohls
nmap <silent> ,gw :vimgrep // %:ccl:cwinJ:nohls
nmap <silent> ,gs :vimgrep /// %:ccl:cwinJ:nohls
nmap <silent> ,cll :ccl
nmap ,b0 :b0
nmap ,b9 :b9
nmap ,b8 :b8
nmap ,b7 :b7
nmap ,b6 :b6
nmap ,b5 :b5
nmap ,b4 :b4
nmap ,b3 :b3
nmap ,b2 :b2
nmap ,b1 :b1
nmap ,bn :bn
nmap ,bp :bp
vnoremap ,9p "9p
vnoremap ,8p "8p
vnoremap ,7p "7p
vnoremap ,6p "6p
vnoremap ,5p "5p
vnoremap ,4p "4p
vnoremap ,3p "3p
vnoremap ,2p "2p
vnoremap ,1p "1p
vnoremap ,p "+p
vnoremap ,9y "9y
vnoremap ,8y "8y
vnoremap ,7y "7y
vnoremap ,6y "6y
vnoremap ,5y "5y
vnoremap ,4y "4y
vnoremap ,3y "3y
vnoremap ,2y "2y
vnoremap ,1y "1y
vnoremap ,y "+y
nnoremap ,nh :nohl
noremap ,q :q
nnoremap ,e :e
nnoremap ,dm :delmarks
nnoremap ,w :w:w
nnoremap ,lp :lp
nnoremap ,cp :cp
nnoremap ,ln :lne
nnoremap ,cn :cn
nnoremap ,snp :set nopaste
nnoremap ,sp :set paste
nnoremap ,hoo :highlight OverLength ctermbg=red ctermfg=white guibg=#592929
nnoremap ,hon :highlight OverLength NONE
nnoremap K :Man 
map Y y$
nmap gx <Plug>NetrwBrowseX
nnoremap <silent> <Plug>NetrwBrowseX :call netrw#NetrwBrowseX(expand("<cWORD>"),0)
snoremap <silent> <expr> <Plug>(neosnippet_jump) neosnippet#jump_impl()
snoremap <silent> <expr> <Plug>(neosnippet_expand) neosnippet#expand_impl()
snoremap <silent> <expr> <Plug>(neosnippet_jump_or_expand) neosnippet#jump_or_expand_impl()
snoremap <silent> <expr> <Plug>(neosnippet_expand_or_jump) neosnippet#expand_or_jump_impl()
smap <silent> <Plug>(neocomplcache_snippets_force_jump) <Plug>(neosnippet_jump)
smap <silent> <Plug>(neocomplcache_snippets_force_expand) <Plug>(neosnippet_expand)
smap <silent> <Plug>(neocomplcache_snippets_jump) <Plug>(neosnippet_jump_or_expand)
smap <silent> <Plug>(neocomplcache_snippets_expand) <Plug>(neosnippet_expand_or_jump)
nnoremap <silent> <Plug>Colorizer :ColorToggle
nmap <silent> <Plug>NERDCommenterAppend :call NERDComment(0, "append")
nnoremap <silent> <Plug>NERDCommenterToEOL :call NERDComment(0, "toEOL")
vnoremap <silent> <Plug>NERDCommenterUncomment :call NERDComment(1, "uncomment")
nnoremap <silent> <Plug>NERDCommenterUncomment :call NERDComment(0, "uncomment")
vnoremap <silent> <Plug>NERDCommenterNest :call NERDComment(1, "nested")
nnoremap <silent> <Plug>NERDCommenterNest :call NERDComment(0, "nested")
vnoremap <silent> <Plug>NERDCommenterAlignBoth :call NERDComment(1, "alignBoth")
nnoremap <silent> <Plug>NERDCommenterAlignBoth :call NERDComment(0, "alignBoth")
vnoremap <silent> <Plug>NERDCommenterAlignLeft :call NERDComment(1, "alignLeft")
nnoremap <silent> <Plug>NERDCommenterAlignLeft :call NERDComment(0, "alignLeft")
vmap <silent> <Plug>NERDCommenterYank :call NERDComment(1, "yank")
nmap <silent> <Plug>NERDCommenterYank :call NERDComment(0, "yank")
vnoremap <silent> <Plug>NERDCommenterInvert :call NERDComment(1, "invert")
nnoremap <silent> <Plug>NERDCommenterInvert :call NERDComment(0, "invert")
vnoremap <silent> <Plug>NERDCommenterSexy :call NERDComment(1, "sexy")
nnoremap <silent> <Plug>NERDCommenterSexy :call NERDComment(0, "sexy")
vnoremap <silent> <Plug>NERDCommenterMinimal :call NERDComment(1, "minimal")
nnoremap <silent> <Plug>NERDCommenterMinimal :call NERDComment(0, "minimal")
vnoremap <silent> <Plug>NERDCommenterToggle :call NERDComment(1, "toggle")
nnoremap <silent> <Plug>NERDCommenterToggle :call NERDComment(0, "toggle")
vnoremap <silent> <Plug>NERDCommenterComment :call NERDComment(1, "norm")
nnoremap <silent> <Plug>NERDCommenterComment :call NERDComment(0, "norm")
nnoremap <silent> <F3> :Rgrep
nnoremap <silent> <F4> :Unite tag
nnoremap <silent> <F5> :UniteWithCurrentDir  -buffer-name= file
map <silent> <F8> :call CompileRunPyhton():ccl
map <silent> <F9> :call CompileRunSH():ccl
map <F7> :Blade build
inoremap <expr>  neocomplcache#cancel_popup()
inoremap <expr>  neocomplcache#undo_completion()
inoremap <expr>  neocomplcache#smart_close_popup() . "\"
inoremap <expr> 	 pumvisible() ? "\" : "\	"
imap  <Plug>(neocomplcache_snippets_expand)
inoremap <expr>  neocomplcache#complete_common_string()
inoremap <expr>  neocomplcache#smart_close_popup(). "\"
inoremap <expr>  neocomplcache#close_popup()
imap ,ihn :IHN
imap ,is :IHS:A
imap ,ih :IHS
iabbr XLOngLIb XLongLib
iabbr XLongLIb XLongLib
iabbr XLOngLib XLongLib
iabbr szie size
iabbr tset test
iabbr paln plan
iabbr valude value
iabbr fnid find
iabbr gerp grep
iabbr lenght length
iabbr verctor vector
iabbr teh the
iabbr Teh The
iabbr taht that
iabbr Taht That
iabbr shoudl should
iabbr Shoudl Should
iabbr seureth suereth
iabbr Seureth Suereth
iabbr seperate separate
iabbr Seperate Separate
iabbr lifecycles life-cycles
iabbr Lifecycles Life-cycles
iabbr lifecycle life-cycle
iabbr Lifecycle Life-cycle
iabbr fone phone
iabbr Fone Phone
iabbr exmaples examples
iabbr Exmaples Examples
iabbr exmaple example
iabbr Exmaple Example
iabbr charcters characters
iabbr Charcters Characters
iabbr charcter character
iabbr Charcter Character
iabbr bianry binary
iabbr Bianry Binary
iabbr bianries binaries
iabbr Bianries Binaries
iabbr becuase because
iabbr Becuase Because
iabbr aslo also
iabbr Aslo Also
iabbr alos also
iabbr Alos Also
iabbr acheive achieve
iabbr Acheive Achieve
iabbr homw home
iabbr algroithm algorithm
iabbr wiht with
iabbr howu home
let &cpo=s:cpo_save
unlet s:cpo_save
set autochdir
set autoindent
set autoread
set autowrite
set backspace=2
set cindent
set cinoptions=h1,l1,g1,t0,i4,+4,(0,w1,W4
set cmdheight=2
set comments=sO:*\ -,mO:*\ \ ,exO:*/,s1:/*,mb:*,ex:*/,://
set completefunc=neocomplcache#manual_complete
set completeopt=menuone,preview
set confirm
set errorfile=/tmp/vPeEMsP/296
set errorformat=%-GIn\ file\ included\ %.%#,%*[^\"]\"%f\"%*\\D%l:\ %m,\"%f\"%*\\D%l:\ %m,%-G%f:%l:\ (Each\ undeclared\ identifier\ is\ reported\ only\ once,%-G%f:%l:\ for\ each\ function\ it\ appears\ in.),%-GIn\ file\ included\ from\ %f:%l:%c,%-GIn\ file\ included\ from\ %f:%l,%-Gfrom\ %f:%l:%c,%-Gfrom\ %f:%l,%f:%l:%c:%m,%f(%l):%m,%f:%l:%m,\"%f\"\\,\ line\ %l%*\\D%c%*[^\ ]\ %m,%D%*\\a[%*\\d]:\ Entering\ directory\ `%f',%X%*\\a[%*\\d]:\ Leaving\ directory\ `%f',%D%*\\a:\ Entering\ directory\ `%f',%X%*\\a:\ Leaving\ directory\ `%f',%DMaking\ %*\\a\ in\ %f,%f|%l|\ %m
set expandtab
set fileencodings=utf-8,cp936,big5,gb18030,ucs,ucs-bom,utf-8-bom
set guicursor=a:block-blinkon0
set helplang=en
set hidden
set hlsearch
set ignorecase
set incsearch
set laststatus=2
set mouse=a
set pastetoggle=<F11>
set path=.,/usr/include,,,/usr/include/c++/4.4.6,~/svn-refactor/onlinenavi/
set redrawtime=100
set ruler
set shiftwidth=2
set shortmess=aoO
set showcmd
set showmatch
set smartcase
set smartindent
set smarttab
set nostartofline
set statusline=%<%f\ %h%m%r%=%k[%{(&fenc==\"\")?&enc:&fenc}%{(&bomb?\",BOM\":\"\")}]\ %-14.(%l,%c%V%)\ %P
set tabstop=2
set tags=~/svn-refactor/onlinenavi/tags,~/.vimtags_filetypes/cpp,~/.vimtags
set termencoding=utf-8
set textwidth=80
set notimeout
set ttimeout
set ttimeoutlen=200
set updatetime=500
set visualbell
set wildmenu
set wildmode=longest:full,full
let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
let v:this_session=expand("<sfile>:p")
silent only
cd ~/svn-refactor/trunk/src/XLongLib/Route
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
set shortmess=aoO
badd +1 ~/svn-refactor/trunk/src/XLongLib/Route/DijkSchema.cpp
badd +50 ~/svn-refactor/trunk/src/XLongLib/Route/DijkSchema.h
badd +124 ~/svn-refactor/trunk/src/XLongLib/Route/mcRoute.cpp
badd +105 ~/svn-refactor/trunk/src/XLongLib/StaticData/DataManage.h
badd +37 ~/svn-refactor/trunk/src/XLongLib/StaticData/StaticDataStructure.h
badd +23 ~/svn-refactor/trunk/src/XLongLib/Algorithm/DijkDataStruct.h
badd +124 ~/svn-refactor/trunk/src/XLongLib/Algorithm/DijkDataStruct_test.cc
badd +50 ~/svn-refactor/trunk/src/XLongLib/Algorithm/DijkDataStruct.cpp
badd +4 ~/svn-refactor/trunk/src/XLongLib/Algorithm/DijkDataStruct_test.h
badd +1 ~/svn-refactor/trunk/src/XLongLib/Algorithm/Dijk.h.gch
badd +4 /usr/include/c++/4.4.4/queue
badd +66 /usr/include/c++/4.4.4/bits/stl_queue.h
badd +161 /usr/include/c++/4.4.4/bits/stl_heap.h
badd +1 ~/svn-refactor/trunk/src/XLongLib/Algorithm/BUILD
badd +27 ~/svn-refactor/trunk/src/XLongLib/Route/BidirectionalDijk.cpp
badd +1 ~/svn-refactor/trunk/src/XLongLib/Route/ShortestDijkSchema.cpp
badd +3 ~/svn-refactor/trunk/src/XLongLib/Route/ShortestDijkSchema.h
badd +30 ~/svn-refactor/trunk/src/XLongLib/Route/BidirectionalDijk.h
badd +135 ~/svn-refactor/trunk/src/XLongLib/Route/RequestInfo.h
badd +193 ~/svn-refactor/trunk/src/XLongLib/Route/RouteDataStructure.h
badd +135 ~/svn-refactor/trunk/src/XLongLib/Route/mcRoute.h
badd +64 ~/svn-refactor/trunk/src/XLongLib/DynamicTraffic/DyTrafficManager.h
badd +167 ~/svn-refactor/trunk/src/XLongRouteProcess/RouteService.cpp
badd +345 ~/svn-refactor/trunk/src/XLongLib/StaticData/DataManage.cpp
badd +735 ~/svn-refactor/trunk/src/XLongLib/DynamicTraffic/DyTrafficManager.cpp
badd +96 ~/svn-refactor/trunk/src/XLongLib/Algorithm/IBidirectionalDijk.h
silent! argdel *
edit ~/svn-refactor/trunk/src/XLongLib/Route/BidirectionalDijk.h
set splitbelow splitright
wincmd _ | wincmd |
vsplit
1wincmd h
wincmd w
set nosplitbelow
set nosplitright
wincmd t
set winheight=1 winwidth=1
exe 'vert 1resize ' . ((&columns * 106 + 106) / 213)
exe 'vert 2resize ' . ((&columns * 106 + 106) / 213)
argglobal
setlocal keymap=
setlocal noarabic
setlocal autoindent
setlocal nobinary
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal cindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=h1,l1,g1,t0,i4,+4,(0,w1,W4
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=sO:*\ -,mO:*\ \ ,exO:*/,s1:/*,mb:*,ex:*/,://
setlocal commentstring=/*%s*/
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=
setlocal conceallevel=0
setlocal completefunc=neocomplcache#manual_complete
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
set cursorline
setlocal cursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != 'cpp'
setlocal filetype=cpp
endif
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=croql
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=0
setlocal include=
setlocal includeexpr=
setlocal indentexpr=CppNoNamespaceAndTemplateIndent()
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255
setlocal keywordprg=
setlocal nolinebreak
setlocal nolisp
setlocal nolist
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=octal,hex
set number
setlocal number
setlocal numberwidth=4
setlocal omnifunc=ccomplete#Complete
setlocal path=.,/usr/include,,,/usr/include/c++/4.4.6,~/svn-refactor/onlinenavi/,~/svn-refactor
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=2
setlocal noshortname
setlocal smartindent
setlocal softtabstop=2
setlocal nospell
setlocal spellcapcheck=
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=
setlocal suffixesadd=
setlocal swapfile
setlocal synmaxcol=3000
if &syntax != 'cpp'
setlocal syntax=cpp
endif
setlocal tabstop=2
setlocal tags=
setlocal textwidth=80
setlocal thesaurus=
setlocal noundofile
setlocal nowinfixheight
setlocal nowinfixwidth
setlocal wrap
setlocal wrapmargin=0
silent! normal! zE
let s:l = 30 - ((29 * winheight(0) + 28) / 56)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
30
normal! 0
wincmd w
argglobal
edit ~/svn-refactor/trunk/src/XLongLib/Route/mcRoute.cpp
setlocal keymap=
setlocal noarabic
setlocal autoindent
setlocal nobinary
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal cindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=h1,l1,g1,t0,i4,+4,(0,w1,W4
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=sO:*\ -,mO:*\ \ ,exO:*/,s1:/*,mb:*,ex:*/,://
setlocal commentstring=/*%s*/
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=
setlocal conceallevel=0
setlocal completefunc=neocomplcache#manual_complete
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
set cursorline
setlocal cursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != 'cpp'
setlocal filetype=cpp
endif
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=croql
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=0
setlocal include=
setlocal includeexpr=
setlocal indentexpr=CppNoNamespaceAndTemplateIndent()
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255
setlocal keywordprg=
setlocal nolinebreak
setlocal nolisp
setlocal nolist
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=octal,hex
set number
setlocal number
setlocal numberwidth=4
setlocal omnifunc=ccomplete#Complete
setlocal path=.,/usr/include,,,/usr/include/c++/4.4.6,~/svn-refactor/onlinenavi/,~/svn-refactor
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=2
setlocal noshortname
setlocal smartindent
setlocal softtabstop=2
setlocal nospell
setlocal spellcapcheck=
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=
setlocal suffixesadd=
setlocal swapfile
setlocal synmaxcol=3000
if &syntax != 'cpp'
setlocal syntax=cpp
endif
setlocal tabstop=2
setlocal tags=
setlocal textwidth=80
setlocal thesaurus=
setlocal noundofile
setlocal nowinfixheight
setlocal nowinfixwidth
setlocal wrap
setlocal wrapmargin=0
silent! normal! zE
let s:l = 124 - ((30 * winheight(0) + 28) / 56)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
124
normal! 08l
wincmd w
exe 'vert 1resize ' . ((&columns * 106 + 106) / 213)
exe 'vert 2resize ' . ((&columns * 106 + 106) / 213)
tabnext 1
if exists('s:wipebuf')
  silent exe 'bwipe ' . s:wipebuf
endif
unlet! s:wipebuf
set winheight=1 winwidth=20 shortmess=aoO
let s:sx = expand("<sfile>:p:r")."x.vim"
if file_readable(s:sx)
  exe "source " . fnameescape(s:sx)
endif
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
unlet SessionLoad
" vim: set ft=vim :
